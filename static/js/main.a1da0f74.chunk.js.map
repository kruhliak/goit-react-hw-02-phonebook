{"version":3,"sources":["components/ContactForm.styles.jsx","components/ContactForm.jsx","components/ContactList.styles.jsx","components/ContactList.jsx","components/Filter.jsx","App.js","index.js"],"names":["Form","styled","form","ContactForm","name","onSubmit","onChange","number","type","value","pattern","title","required","autoComplete","List","ul","Item","li","Button","button","ContactList","contactsData","onDeleteContact","map","contact","onClick","id","Filter","filter","App","state","contacts","handleChange","e","currentTarget","setState","handleSubmit","preventDefault","randomId","nanoid","find","includes","alert","resetForm","getVisibleContacts","normalizedFilter","toLowerCase","item","deleteContact","contactId","prevState","this","visibleContacts","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1da0f74.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\r\n\r\nexport const Form = styled.form`\r\n  display: table-caption;\r\n\r\n\r\n`;","import React from 'react';\r\nimport { Form } from './ContactForm.styles';\r\n\r\nfunction ContactForm({ name, onSubmit, onChange, number }) {\r\n  return (\r\n    <div>\r\n      <Form onSubmit={onSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            onChange={onChange}\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            autoComplete=\"off\"\r\n          />\r\n        </label>\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            onChange={onChange}\r\n            value={number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            autoComplete=\"off\"\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Add contact</button>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const List = styled.ul`\r\n  padding: 5px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: baseline;\r\n  margin: 20px auto;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  margin: 10px 0;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  margin-left: 10px;\r\n`;\r\n","import React from 'react';\r\nimport { List, Item, Button } from './ContactList.styles';\r\n\r\nfunction ContactList({ contactsData, onDeleteContact }) {\r\n  return (\r\n    <List>\r\n      {contactsData.map(contact => (\r\n        <Item key={contact.id}>\r\n          {contact.name}: {contact.number}\r\n          <Button type=\"button\" onClick={() => onDeleteContact(contact.id)}>\r\n            Удалить\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default ContactList;\r\n","function Filter({ onChange, filter }) {\r\n  return (\r\n    <div>\r\n      <p>Find contacts by name</p>\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        onChange={onChange}\r\n        value={filter}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        autoComplete=\"off\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n","import React, { Component } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nexport default class App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const randomId = nanoid();\n    const { name, contacts } = this.state;\n    const findContact = contacts.find(contact => contact.name.includes(name));\n\n    findContact\n      ? alert(`${name} is already in contacts`)\n      : this.setState({\n          contacts: [\n            ...this.state.contacts,\n            { id: randomId, name: this.state.name, number: this.state.number },\n          ],\n        });\n\n    this.resetForm();\n  };\n\n  resetForm = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(item =>\n      item.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  render() {\n    const { name, number, filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n\n    return (\n      <div id=\"container\">\n        <h1>Phonebook</h1>\n        <ContactForm\n          onChange={this.handleChange}\n          onSubmit={this.handleSubmit}\n          name={name}\n          number={number}\n        />\n        <h2>Contacts</h2>\n        <Filter filter={filter} onChange={this.handleChange} />\n        <ContactList\n          contactsData={visibleContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}