{"version":3,"sources":["components/ContactForm.styles.jsx","components/ContactForm.jsx","components/ContactList.styles.jsx","components/ContactList.jsx","components/Filter.styles.jsx","components/Filter.jsx","App.js","index.js"],"names":["Form","styled","form","ContactForm","state","name","number","handleChangeForm","e","currentTarget","value","setState","handleSubmitForm","preventDefault","props","onSubmit","resetForm","this","type","onChange","pattern","title","required","autoComplete","Component","List","ul","ContactList","contactsData","onDeleteContact","map","contact","onClick","id","Thumb","div","Filter","filter","App","contacts","handleChange","handleSubmit","randomId","nanoid","find","includes","alert","getVisibleContacts","normalizedFilter","toLowerCase","item","deleteContact","contactId","prevState","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAEaA,EAAOC,IAAOC,KAAV,4T,OCCIC,E,4MACnBC,MAAQ,CACNC,KAAM,GACNC,OAAQ,I,EAGVC,iBAAmB,SAAAC,GACjB,MAAwBA,EAAEC,cAAlBJ,EAAR,EAAQA,KAAMK,EAAd,EAAcA,MACd,EAAKC,SAAL,eAAiBN,EAAOK,K,EAG1BE,iBAAmB,SAAAJ,GACjBA,EAAEK,iBACF,MAAyB,EAAKT,MAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OACd,EAAKQ,MAAMC,SAASV,EAAMC,GAE1B,EAAKU,a,EAGPA,UAAY,WACV,EAAKL,SAAS,CAAEN,KAAM,GAAIC,OAAQ,M,4CAGpC,WACE,OACE,8BACE,eAACN,EAAD,CAAMe,SAAUE,KAAKL,iBAArB,UACE,yCAEE,uBACEM,KAAK,OACLb,KAAK,OACLc,SAAUF,KAAKV,iBACfG,MAAOO,KAAKb,MAAMC,KAClBe,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,aAAa,WAGjB,2CAEE,uBACEL,KAAK,MACLb,KAAK,SACLc,SAAUF,KAAKV,iBACfG,MAAOO,KAAKb,MAAME,OAClBc,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,aAAa,WAGjB,wBAAQL,KAAK,SAAb,kC,GArD+BM,aCD5BC,EAAOxB,IAAOyB,GAAV,6aCgBFC,I,EAAAA,EAff,YAAyD,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,gBACnC,OACE,cAACJ,EAAD,UACGG,EAAaE,KAAI,SAAAC,GAAO,OACvB,+BACGA,EAAQ1B,KADX,KACmB0B,EAAQzB,OACzB,wBAAQY,KAAK,SAASc,QAAS,kBAAMH,EAAgBE,EAAQE,KAA7D,0DAFOF,EAAQE,UCLZC,EAAQjC,IAAOkC,IAAV,iKCkBHC,MAlBf,YAAuC,IAArBjB,EAAoB,EAApBA,SAAUkB,EAAU,EAAVA,OAC1B,OACE,eAACH,EAAD,WACE,sDACA,uBACEhB,KAAK,OACLb,KAAK,SACLc,SAAUA,EACVT,MAAO2B,EACPjB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,aAAa,YCPAe,E,4MACnBlC,MAAQ,CACNmC,SAAU,CACR,CAAEN,GAAI,OAAQ5B,KAAM,gBAAiBC,OAAQ,aAC7C,CAAE2B,GAAI,OAAQ5B,KAAM,iBAAkBC,OAAQ,aAC9C,CAAE2B,GAAI,OAAQ5B,KAAM,gBAAiBC,OAAQ,aAC7C,CAAE2B,GAAI,OAAQ5B,KAAM,iBAAkBC,OAAQ,cAEhD+B,OAAQ,I,EAGVG,aAAe,SAAAhC,GACb,MAAwBA,EAAEC,cAAlBJ,EAAR,EAAQA,KAAMK,EAAd,EAAcA,MACd,EAAKC,SAAL,eAAiBN,EAAOK,K,EAG1B+B,aAAe,SAACpC,EAAMC,GACpB,IAAQiC,EAAa,EAAKnC,MAAlBmC,SACFG,EAAWC,cACGJ,EAASK,MAAK,SAAAb,GAAO,OAAIA,EAAQ1B,KAAKwC,SAASxC,MAG/DyC,MAAM,GAAD,OAAIzC,EAAJ,4BACL,EAAKM,SAAS,CACZ4B,SAAS,GAAD,mBAAMA,GAAN,CAAgB,CAAEN,GAAIS,EAAUrC,OAAMC,e,EAItDyC,mBAAqB,WACnB,MAA6B,EAAK3C,MAA1BiC,EAAR,EAAQA,OAAQE,EAAhB,EAAgBA,SACVS,EAAmBX,EAAOY,cAChC,OAAOV,EAASF,QAAO,SAAAa,GAAI,OACzBA,EAAK7C,KAAK4C,cAAcJ,SAASG,O,EAIrCG,cAAgB,SAAAC,GACd,EAAKzC,UAAS,SAAA0C,GAAS,MAAK,CAC1Bd,SAAUc,EAAUd,SAASF,QAAO,SAAAN,GAAO,OAAIA,EAAQE,KAAOmB,U,4CAIlE,WACE,IAAQf,EAAWpB,KAAKb,MAAhBiC,OACFiB,EAAkBrC,KAAK8B,qBAE7B,OACE,sBAAKd,GAAG,YAAR,UACE,2CACA,cAAC,EAAD,CAAalB,SAAUE,KAAKwB,eAC5B,0CACA,cAAC,EAAD,CAAQJ,OAAQA,EAAQlB,SAAUF,KAAKuB,eACvC,cAAC,EAAD,CACEZ,aAAc0B,EACdzB,gBAAiBZ,KAAKkC,uB,GAtDC3B,aCFjC+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.39f01f7e.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Form = styled.form`\r\n  display: grid;\r\n  grid-template-columns: min-content;\r\n\r\n  & button {\r\n    margin: 10px 0;\r\n    background-color: #e6ffe0d5;\r\n    border: 1px solid #000;\r\n    border-radius: 4px;\r\n    &:hover,\r\n    :focus {\r\n      background-color: #bffab0d3;\r\n      transform: scale(1.1);\r\n    }\r\n  }\r\n`;\r\n","import React, { Component } from 'react';\r\nimport { Form } from './ContactForm.styles';\r\n\r\nexport default class ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChangeForm = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmitForm = e => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    this.props.onSubmit(name, number);\r\n\r\n    this.resetForm();\r\n  };\r\n\r\n  resetForm = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form onSubmit={this.handleSubmitForm}>\r\n          <label>\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              onChange={this.handleChangeForm}\r\n              value={this.state.name}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              autoComplete=\"off\"\r\n            />\r\n          </label>\r\n          <label>\r\n            Number\r\n            <input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              onChange={this.handleChangeForm}\r\n              value={this.state.number}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              autoComplete=\"off\"\r\n            />\r\n          </label>\r\n          <button type=\"submit\">Add contact</button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// function ContactForm({ name, onSubmit, onChange, number }) {\r\n//   return (\r\n//     <div>\r\n//       <Form onSubmit={onSubmit}>\r\n//         <label>\r\n//           Name\r\n//           <input\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             onChange={onChange}\r\n//             value={name}\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//             required\r\n//             autoComplete=\"off\"\r\n//           />\r\n//         </label>\r\n//         <label>\r\n//           Number\r\n//           <input\r\n//             type=\"tel\"\r\n//             name=\"number\"\r\n//             onChange={onChange}\r\n//             value={number}\r\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//             required\r\n//             autoComplete=\"off\"\r\n//           />\r\n//         </label>\r\n//         <button type=\"submit\">Add contact</button>\r\n//       </Form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ContactForm;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const List = styled.ul`\r\n  padding: 5px;\r\n  margin: 10px 0;\r\n\r\n  & li {\r\n    margin: 5px 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n\r\n    & button {\r\n      margin-left: 10px;\r\n      background-color: #f0c8c8;\r\n      border: 1px solid #000;\r\n      border-radius: 4px;\r\n      &:hover,\r\n    :focus {\r\n      background-color: #f09797;\r\n      transform: scale(1.05);\r\n    }\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { List } from './ContactList.styles';\r\n\r\nfunction ContactList({ contactsData, onDeleteContact }) {\r\n  return (\r\n    <List>\r\n      {contactsData.map(contact => (\r\n        <li key={contact.id}>\r\n          {contact.name}: {contact.number}\r\n          <button type=\"button\" onClick={() => onDeleteContact(contact.id)}>\r\n            Удалить\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default ContactList;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Thumb = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  & p {\r\n    margin: 5px 0;\r\n  }\r\n`;\r\n","import {Thumb} from './Filter.styles'\r\n\r\nfunction Filter({ onChange, filter }) {\r\n  return (\r\n    <Thumb>\r\n      <p>Find contacts by name</p>\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        onChange={onChange}\r\n        value={filter}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        autoComplete=\"off\"\r\n      />\r\n    </Thumb>\r\n  );\r\n}\r\n\r\nexport default Filter;\r\n","import React, { Component } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nexport default class App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (name, number) => {\n    const { contacts } = this.state;\n    const randomId = nanoid();\n    const findContact = contacts.find(contact => contact.name.includes(name));\n\n    findContact\n      ? alert(`${name} is already in contacts`)\n      : this.setState({\n          contacts: [...contacts, { id: randomId, name, number }],\n        });\n  };\n\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(item =>\n      item.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  render() {\n    const { filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n\n    return (\n      <div id=\"container\">\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.handleSubmit} />\n        <h2>Contacts</h2>\n        <Filter filter={filter} onChange={this.handleChange} />\n        <ContactList\n          contactsData={visibleContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}